name: Build and Push to ECR

on:
  push:
    branches: ["main", "dev"]
    paths:
      - "**"
  pull_request:
    branches: ["main", "dev"]
    paths:
      - "**"

env:
  AWS_REGION: eu-central-1
  BASE_NAME: game-jam

permissions:
  contents: read
  id-token: write

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    outputs:
      ecr-registry: ${{ steps.login-ecr.outputs.registry }}
      ecr-repository: ${{ env.ECR_REPOSITORY }}
      image-tag: ${{ env.IMAGE_TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - &set-env-vars
        name: Set environment variables
        run: |
          # Set environment name based on branch
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "IMAGE_TAG=prod" >> $GITHUB_ENV
          else
            echo "ENV=dev" >> $GITHUB_ENV
            echo "IMAGE_TAG=dev" >> $GITHUB_ENV
          fi

          # Set resource names using the same pattern as Terraform
          echo "ECR_REPOSITORY=${BASE_NAME}-${ENV}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${BASE_NAME}-${ENV}" >> $GITHUB_ENV
          echo "SERVICE_NAME=app-service-${ENV}" >> $GITHUB_ENV
          echo "TASK_FAMILY=${BASE_NAME}-task-${ENV}" >> $GITHUB_ENV

      - *set-env-vars

      - name: Build and push
        uses: docker/build-push-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          build-args: |
            ENV=${{ env.ENV }}
          provenance: false
          sbom: false

  deploy:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    env:
      ECR_REGISTRY: ${{ needs.build-and-push.outputs.ecr-registry }}
      ECR_REPOSITORY: ${{ needs.build-and-push.outputs.ecr-repository }}
      IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}

    steps:
      - &set-env-vars
        name: Set environment variables
        run: |
          # Set environment name based on branch
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "IMAGE_TAG=prod" >> $GITHUB_ENV
          else
            echo "ENV=dev" >> $GITHUB_ENV
            echo "IMAGE_TAG=dev" >> $GITHUB_ENV
          fi

          # Set resource names using the same pattern as Terraform
          echo "ECR_REPOSITORY=${BASE_NAME}-${ENV}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${BASE_NAME}-${ENV}" >> $GITHUB_ENV
          echo "SERVICE_NAME=app-service-${ENV}" >> $GITHUB_ENV
          echo "TASK_FAMILY=${BASE_NAME}-task-${ENV}" >> $GITHUB_ENV

      - *set-env-vars

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_FAMILY }} \
            --query taskDefinition > task-definition.json

      - name: Update container image
        run: |
          # Update the container image in task definition
          jq --arg IMAGE "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" \
            '.containerDefinitions[0].image = $IMAGE' \
            task-definition.json > updated-task-definition.json

      - name: Register new task definition
        id: register-task
        run: |
          register_output=$(aws ecs register-task-definition --cli-input-json file://updated-task-definition.json)
          echo "task_arn=$(echo $register_output | jq -r '.taskDefinition.taskDefinitionArn')" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.SERVICE_NAME }} \
            --task-definition ${{ steps.register-task.outputs.task_arn }} \
            --force-new-deployment

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.CLUSTER_NAME }} \
            --services ${{ env.SERVICE_NAME }}
