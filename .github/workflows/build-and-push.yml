name: Build and Push to ECR

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]

env:
  AWS_REGION: eu-central-1
  BASE_NAME: game-jam

permissions:
  contents: read
  id-token: write

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set environment variables
        id: env-vars
        run: |
          # Set environment name based on branch
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENV="prod"
          else
            ENV="dev"
          fi
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=game-jam-$ENV" >> $GITHUB_ENV
          echo "CLUSTER_NAME=game-jam-$ENV" >> $GITHUB_ENV
          echo "SERVICE_NAME=app-service-$ENV" >> $GITHUB_ENV
          echo "TASK_FAMILY=game-jam-task-$ENV" >> $GITHUB_ENV
          echo "IMAGE_TAG=$ENV" >> $GITHUB_ENV

      - name: Remove latest tag if exists
        run: |
          MANIFEST=$(aws ecr batch-get-image --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageTag=latest --query 'images[].imageManifest' --output text || true)
          if [ ! -z "$MANIFEST" ]; then
            aws ecr batch-delete-image --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageTag=latest
            echo "Removed latest tag"
          else
            echo "No latest tag found"
          fi

      - name: Build and push
        uses: docker/build-push-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          build-args: |
            ENV=${{ env.ENV }}
          provenance: false
          sbom: false

  deploy:
    name: ECS Deployment
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
      - name: Set Environment Variables
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENV="prod"
          else
            ENV="dev"
          fi
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=game-jam-$ENV" >> $GITHUB_ENV
          echo "CLUSTER_NAME=game-jam-$ENV" >> $GITHUB_ENV
          echo "SERVICE_NAME=app-service-$ENV" >> $GITHUB_ENV
          echo "TASK_FAMILY=game-jam-task-$ENV" >> $GITHUB_ENV
          echo "IMAGE_TAG=$ENV" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download and Process Task Definition
        run: |
          # Get the current task definition
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_FAMILY }} \
            --query 'taskDefinition' > task-definition-full.json

          # Extract only the needed fields and update the image
          jq '{
            family: .family,
            containerDefinitions: [.containerDefinitions[0] | . + {image: "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"}],
            executionRoleArn: .executionRoleArn,
            taskRoleArn: .taskRoleArn,
            networkMode: .networkMode,
            volumes: .volumes,
            placementConstraints: .placementConstraints,
            requiresCompatibilities: .requiresCompatibilities,
            cpu: .cpu,
            memory: .memory
          }' task-definition-full.json > task-definition.json

      - name: Register New Task Definition
        id: register-task
        run: |
          register_output=$(aws ecs register-task-definition --cli-input-json file://task-definition.json)
          echo "task_arn=$(echo $register_output | jq -r '.taskDefinition.taskDefinitionArn')" >> $GITHUB_OUTPUT

      - name: Update ECS Service with New Task Definition
        run: |
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.SERVICE_NAME }} \
            --task-definition ${{ steps.register-task.outputs.task_arn }} \
            --force-new-deployment

      - name: Wait for ECS Service to Stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.CLUSTER_NAME }} \
            --services ${{ env.SERVICE_NAME }}
